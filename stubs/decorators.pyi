from typing import Union, Any
from types import FunctionType, ModuleType

from . import Class

def parameters_wrapper(func, parameters) -> FunctionType: ...

def wrapper_recursion(wrapper_list: list, func, parameter_library: dict): ...

def my_wraps(name: str): ...

class TimeWrapper(Class.TimeWrapper):
    def __init__(self) -> None: ...
    def wrapper(self, func) -> FunctionType: ...
    def get_data(self, func_id) -> Any: ...

class InfoWrapper(Class.InfoWrapper):
    def __init__(self, info_dict) -> None: ...
    def wrapper(self, func) -> FunctionType: ...

def functionRegistrations(name: str = None): ...

